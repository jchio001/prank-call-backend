import java.io.*;
import java.util.*;

class Solution {

  
  //Another 10 git hash problem
  //Run time: O(n)
  public static void main(String[] args) {      
    int nums[] = new int[] {1, 9, 9, 3};               
    System.out.println(sqrt(625, 0, 625));
  }
  
  public static int sqrt(int num, int start, int end) {            
    System.out.println(start);
    System.out.println(end);
    System.out.println();
    if (start >= end)
      return end;
    if (end * end == num)
      return end;
    
    int middle = (end + start) / 2;
    
    if (end * end > num)
      return sqrt(num, start, middle);
    else
      return sqrt(num, end, end * 2);
        
  }
  
  public static int[] LPN(int nums[]) {
    int pos;
    int crappyHash[] = new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int bigNumber[] = new int[nums.length];
    for (int i = 0; i < nums.length; ++i) {
        pos = nums[i];
        ++crappyHash[pos];
    }    
    
    int cnt = 0;
    for (int j = 9; j >= 0; --j) {
      while (crappyHash[j] > 0) {
        --crappyHash[j];
        bigNumber[cnt] = j;
        ++cnt;
      }        
    }
    
    return bigNumber;
  }
    
  
}
