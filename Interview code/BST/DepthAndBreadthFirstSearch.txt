import java.io.*;
import java.util.*;

class Solution {
  
  public static class Node {
    int value;
    Node left;
    Node right;        
    
    
    public Node(int value) {
      this.value = value;
      left = null;
      right = null;
    }
    
  };
  
  public static void main(String[] args) {  
    Node head = SetUpBST();
    DepthFirstSearch(head);
  }
  
  
  public static void BreadthFirstSearch(Node head) {
    Queue<Node> q = new LinkedList<Node>();
    Node top;
    q.add(head);
    while (!q.isEmpty()) {
      top = q.poll();
      System.out.println(top.value);
      if (top.left != null)
        q.add(top.left);        
      if (top.right != null)
        q.add(top.right);            
    }      
  }
  
  public static void DepthFirstSearch(Node head) {
    Stack<Node> s = new Stack<Node>();
    Node top;
    s.push(head);
    while (!s.isEmpty()) {
      top = s.pop();
      System.out.println(top.value);
      if (top.right != null)
        s.push(top.right);
      if (top.left != null)
        s.push(top.left);                          
    }      
  }
  
  public static Node SetUpBST() {
    Node five = new Node(5);
    Node two = new Node(2);
    Node negfour = new Node(-4);
    Node three = new Node(3);
    Node twelve = new Node(12);
    Node nine = new Node(9);
    Node twentyone = new Node(21);
    Node nineteen = new Node(19);
    Node twentyfive = new Node(25);
    
    five.left = two;
    two.left = negfour;
    two.right = three;
    five.right = twelve;
    twelve.left = nine;
    twelve.right = twentyone;
    twentyone.left = nineteen;
    twentyone.right = twentyfive;
    return five;
  }
  
}