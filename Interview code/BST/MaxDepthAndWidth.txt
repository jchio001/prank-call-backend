import java.io.*;
import java.util.*;

class Solution {
  
  public static class Node {
    int value;
    Node left;
    Node right;        
    
    
    public Node(int value) {
      this.value = value;
      left = null;
      right = null;
    }
    
  };
  
  public static void main(String[] args) {  
    Node head = SetUpBST();
    System.out.println(maxWidth(head));
  }
  
  public static int maxDepth(Node head) {
    if (head == null)
      return 0;
    
    return Math.max(1 + maxDepth(head.left), 1 + maxDepth(head.right));
    
  }
  
  public static int maxWidth(Node head) {
    if (head == null)
      return 0;
    
    int nodeCnt = 0; //for counting the # of nodes on a level
    int maxWidth = 0;
    Queue<Node> q = new LinkedList<Node>();  
    Node n;
    q.add(head);
    
    while (!q.isEmpty()) {
      //get size of the level
      nodeCnt = q.size();
      if (nodeCnt > maxWidth)
        maxWidth = nodeCnt;
      
      //q currently has all nodes of the current level.
      //what this loop does is replace the q elements with the next level
      //then the process repeats
      while (nodeCnt > 0) {                
        n = q.poll();
        if (n.left != null)
          q.add(n.left);
        if (n.right != null)
          q.add(n.right);
        nodeCnt--;
      }
      
    }
    return maxWidth;
  }
  
  public static Node SetUpBST() {
    Node five = new Node(5);
    Node two = new Node(2);
    Node negfour = new Node(-4);
    Node three = new Node(3);
    Node twelve = new Node(12);
    Node nine = new Node(9);
    Node twentyone = new Node(21);
    Node nineteen = new Node(19);
    Node twentyfive = new Node(25);
    
    five.left = two;
    two.left = negfour;
    two.right = three;
    five.right = twelve;
    twelve.left = nine;
    twelve.right = twentyone;
    twentyone.left = nineteen;
    twentyone.right = twentyfive;
    return five;
  }
  
}