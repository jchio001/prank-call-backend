import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {    
  
  public static class Node {
    int value;
    Node left;
    Node right;        
    
    
    public Node(int value) {
      this.value = value;
      left = null;
      right = null;
    }
    
  };
  
  public static Node SetUpBST() {
    Node five = new Node(5);
    Node two = new Node(2);
    Node negfour = new Node(-4);
    Node three = new Node(3);
    Node twelve = new Node(12);
    Node nine = new Node(9);
    Node twentyone = new Node(21);
    Node nineteen = new Node(19);
    Node twentyfive = new Node(25);
    
    five.left = two;
    two.left = negfour;
    two.right = three;
    five.right = twelve;
    twelve.left = nine;
    twelve.right = twentyone;
    twentyone.left = nineteen;
    twentyone.right = twentyfive;
    return five;
  }
  
  public static void NormalDFS(Node head) {    
    if (head == null)
      return;
    
    Stack<Node> s = new Stack<Node>();    
    s.push(head);
    
    Node tmp;
    while (!s.empty()) {
      tmp = s.pop();
      System.out.println(tmp.value);
      if (tmp.right != null)
        s.push(tmp.right);
      if (tmp.left != null)
        s.push(tmp.left);      
    }
  }
  
  public static void RecursiveDFS(Node head) {
    if (head == null)
      return;
    
    System.out.println(head.value);
    RecursiveDFS(head.left);
    RecursiveDFS(head.right);
  }
  
  public static void BFS(Node head) {
    if (head == null)
      return;
    
    Queue<Node> q = new LinkedList<Node>();
    q.add(head);
    Node tmp;
    while (!q.isEmpty()) {
      tmp = q.poll();
      System.out.println(tmp.value);
      
      if (tmp.left != null)
        q.add(tmp.left);
      if (tmp.right != null)
        q.add(tmp.right);      
    }
  }
  
  public static void main(String[] args) {    
    Node head = SetUpBST();
    BFS(head);
  }
}
