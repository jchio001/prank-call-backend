import java.io.*;
import java.util.*;

class Solution {
  public static void main(String[] args) {
    int arrayToSort[] = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
    
    int end = arrayToSort.length - 1;    
    mergeSort(arrayToSort, 0, arrayToSort.length - 1);
    System.out.println(Arrays.toString(arrayToSort));    
    }
      
  
  public static void mergeSort(int arrayToSort[], int start, int end) {
    //base case. if start is the same as end, we have nothing left to sort on
    //if start > end, you messed up somewhere. That's not a good sign.
    if (start >= end)
      return;
    
    int middle = (start + end)/2;
    mergeSort(arrayToSort, start, middle);
    mergeSort(arrayToSort, middle + 1, end);
    merge(arrayToSort, start, middle, end);
            
  }
  
  //Given two sorted arrays, this function returns a sorted array that
  //contains all elements from both arrays
  public static void merge(int arrayToSort[], int start, int mid, int end) {
    
    //The last int in copyOfRange that specifies the end is NOT INCLUDED
    int array1[] = Arrays.copyOfRange(arrayToSort, start, mid + 1);
    int array2[] = Arrays.copyOfRange(arrayToSort, mid + 1, end + 1);    
    
    int i = 0; int j = 0; int k = start;
    int maxLen1 = array1.length;
    int maxLen2 = array2.length;
    
    //Here, we're just going through both arrays.
    //Whenever we put one of two array's element inside our merged array
    //We move our counter foward for that array
    //Repeat until one of the counters reaches the end.
    //&& instead of or because || will let our counter go past its respective array's size. If that happens, we get an outofbounds exception!
    while (i < maxLen1 && j < maxLen2) {
      if (array1[i] < array2[j]) {
        arrayToSort[k] = array1[i];
        ++i;        
      }
      else {
        arrayToSort[k] = array2[j];
        ++j;        
      }
      ++k;
    }
    
    //if one array has hit its bounds, we move over the remaining
    //nums from the second array    
    while (i < maxLen1) {
      arrayToSort[k] = array1[i];
      ++i;
      ++k;
    }
    
    while (j < maxLen2) {
      arrayToSort[k] = array2[j];
      ++j;
      ++k;
    }    
        
  }
  
}
