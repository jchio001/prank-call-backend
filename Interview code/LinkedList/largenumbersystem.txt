import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Solution {
  
  public static class Node {
    
    int value;
    Node next;
    
    public Node(int value) {
      this.value = value;
      this.next = null;
    }
    
  }
  
  public static Node numToList(int num) {
    
    int digit;
    
    Node head = new Node(num % 10);
    Node iterator = head;    
        
    num = num / 10;      
    
    //Yes the number will be backwards. Yes this is intended.
    while (num > 0) {      
      Node node = new Node(num % 10);      
      num = num / 10;
      iterator.next = node;
      iterator = iterator.next;      
    }
    
    return head;
    
  }
  
  public static void printList(Node head) {
    while (head != null) {
      System.out.print(head.value + " ");
      head = head.next;
    }
    System.out.println();
  }
  
  public static Node addLists(Node head1, Node head2) {        
    
    Node head = new Node((head1.value + head2.value) % 10);
    Node iterator = head;
    Node newNode;
    
    int digit = 0;
    int carryover = (head1.value + head2.value) / 10;    
    
    head1 = head1.next;
    head2 = head2.next;
    
    while (head1 != null && head2 != null) {
      if (head1 == null && head2 != null)
        digit = head2.value + carryover;
      else if (head1 != null && head2 == null)
        digit = head2.value + carryover;
      else
        digit = carryover + head1.value + head2.value;
            
      carryover = digit / 10;
      digit = digit % 10;      
      newNode = new Node(digit);
      iterator.next = newNode;
      iterator = iterator.next;
      
      if (head1 != null)
        head1 = head1.next;            
      if (head2 != null)
        head2 = head2.next;
    }
    
    if (carryover > 0) {
      newNode = new Node(carryover);
      iterator.next = newNode;
    }
    
    return head;
    
  }
  
  public static void main(String[] args) {    
    Node head1 = numToList(555);
    Node head2 = numToList(555);    
    Node head3 = addLists(head1, head2);
    printList(head3);
  }
}
